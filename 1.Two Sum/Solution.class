/*方法一(蛮力破解）：
使用两层循环遍历数组，判断两个数的和是否等于target，返回这两个数所对应的下标。时间复杂度(n^2)。
*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++)
          for(int j=i+1;j<nums[i].length-1;j++)
        {
            if(nums[i]+nums[j]==target)
            return new int[] {i,j};
        }
        return null;
    }
}
/*方法二（HashMap）：
本题的本质是数满足一定条件后找到两个数所对应的下标。因此容易想到使用HashMap，以数为key，以下标为value，根据target-nums[i]索引对应的value即可解决问题。
时间复杂度为O(n)。
*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++)
            map.put(nums[i],i);
        for(int i=0;i<nums.length;i++)
        {
            int flag=target-nums[i];
            if(map.containsKey(flag)&&map.get(falg)!=i)
            return new int[] {i,map.get(flag)};
        }
        return null;
    }
}
/*方法三（HashTable）：
事实证明，我们可以一次完成。当我们迭代并向表格中插入元素时，我们也回头检查当前元素的补码是否已经存在于表格中。如果存在，我们已经找到了解决办法，并立即返
回。时间复杂度为O(n).
*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++)
        {
            int flag=target-nums[i];
            if(map.containsKey(flag))
            return new int[] {i,map.get(flag)};
            map.put(nums[i],i);
        }
        return null;
    }
}
